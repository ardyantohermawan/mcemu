#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Variant of mcsemu-server which only logs to CSV without launch/shutdown
# Attention: Value per service is unavailability

import sys
import time
import random

sys.path.append("..")
from mcsalgorithms.distavail import Service, ServiceSet
from mcsalgorithms.servicegen import ServiceGenerator

class EmulatedService:
	def __init__(self, service):
		self.service = service
		self.avonline = 1
		self.avoffline = 0
		self.process = None
		self.online = True

	def realav(self):
		realav = float(self.avonline) / (self.avonline + self.avoffline)
		return realav

	def __repr__(self):
		unavailablestate = "10"[self.online]
		return unavailablestate

if len(sys.argv) != 2 and (len(sys.argv) != 3 or sys.argv[2] not in ("convergence", "incident", "stable")):
	print "Syntax: mcsemu-server-csv <inifile> [model]"
	print "Models: convergence,incident,stable"
	print "Semantics of stable: availability = 100%"
	sys.exit(1)

model = "convergence"
if len(sys.argv) == 3:
	model = sys.argv[2]

sg = ServiceGenerator()
services = sg.loadservices(sys.argv[1])

emulatedservices = []
for service in services:
	emulatedservices.append(EmulatedService(service))

print "#time,onlinestate(s)..."
inittime = int(time.time())
incidenttime = None
while True:
	time.sleep((1, 5)[model == "stable"])

	for es in emulatedservices:
		if model == "stable":
			continue

		if es.online:
			es.avonline += 1
		else:
			es.avoffline += 1

		avdiff = es.realav() - es.service.availability
		switchprobability = random.random()

		if model == "convergence":
			if es.online and avdiff > 0 and abs(avdiff) > switchprobability:
				es.online = False
			elif not es.online and avdiff < 0 and abs(avdiff) > switchprobability:
				es.online = True
		elif model == "incident":
			if es.online and switchprobability > es.service.availability and avdiff > 0.0:
				es.online = False
				incidenttime = time.time()
			elif not es.online and incidenttime and time.time() - incidenttime > 50 + random.random() * 50:
				es.online = True
				incidenttime = None

	print "%i,%s" % (int(time.time()) - inittime, ",".join([str(x) for x in emulatedservices]))
