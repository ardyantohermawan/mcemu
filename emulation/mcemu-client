#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Emulates storage service usage by retrieving fragments from emulated FTP/HTTP servers
# Attention: Only supports availability, none of the other goal properties
# Attention: Only supports individual algorithms, not the 'all' mode
# Syntax: mcemu-client <inifile> <min-availability/0> <algorithm>
# Algorithms: fixed|proportional|absolute|random|combinatory|staggered|picav|picav+

import sys
import time
import random
import os
import urllib

sys.path.append("..")
os.chdir(os.path.dirname(sys.argv[0]))

from mcsalgorithms.distavail import Service, ServiceSet
from mcsalgorithms.servicegen import ServiceGenerator
from mcsalgorithms.wrapper import DistributionWrapper

class EmulatedServiceClient:
	def __init__(self, service, ftpport, httpport):
		self.service = service
		self.ftpport = ftpport
		self.httpport = httpport
		self.workdir = os.path.join(os.getcwd(), "_rootdirs", service.name)
		self.fragments = service.fragment + service.redundant

	def __repr__(self):
		return "EC[%s:workdir:%s,fragments:%i]" % (self.service.name, self.workdir, self.fragments)

	def upload(self, algorithmdir, fragmentfile):
		algorithmworkdir = os.path.join(self.workdir, algorithmdir)
		try:
			os.makedirs(algorithmworkdir)
		except OSError:
			pass
		filepath = "%s/frag_%s" % (algorithmworkdir, fragmentfile)
		print "** =>", filepath
		fn = os.path.join(algorithmworkdir, "frag_%s" % fragmentfile)
		f = open(fn, "w")
		f.write("somedata\n")
		f.close()

	def download(self, algorithmdir, fragmentfile):
		httpurl = "http://localhost:%i/%s/frag_%s" % (self.httpport, algorithmdir, fragmentfile)
		print "** <=", httpurl
		urllib.urlopen(httpurl)

if len(sys.argv) != 4:
	print "Syntax: mcemu-client <inifile> <min-availability/0> <algorithm>"
	print "Algorithms: fixed|proportional|absolute|random|combinatory|staggered|picav|picav+"
	sys.exit(1)

sg = ServiceGenerator()
services = sg.loadservices(sys.argv[1])

targetavailability = float(sys.argv[2])
if targetavailability > 1.0:
	targetavailability /= 100.0

mode = sys.argv[3]
if mode == "all":
	print "Mode must not be 'all'!"
	sys.exit(1)

wrapper = DistributionWrapper()
success = wrapper.assigndistribution(services, targetavailability, mode)
if not success:
	print "No solution found; emulation would fail."
	sys.exit(1)

for service in services:
	print "// %s: %i + %i fragments" % (service.name, service.fragment, service.redundant)

ftpport = 2000
httpport = 3000
emulatedserviceclients = []
for service in services:
	emulatedserviceclients.append(EmulatedServiceClient(service, ftpport, httpport))
	ftpport += 1
	httpport += 1

print "Emulated service clients:"
print emulatedserviceclients

print "Placement of fragments according to chosen distribution..."
fragnum = 1
for es in emulatedserviceclients:
	for localfragnum in range(es.fragments):
		es.upload("equal", fragnum + localfragnum)
	fragnum += es.fragments

f = open("_out.csv", "w")
print >>f, "# vtime(s),emu-avail(%%) for mode:%s target-avail(%%)=%3.4f" % (mode, targetavailability)
f.close()

#comparisoncount = len(emulatedserviceclients)
significantfragments = sum([es.service.fragment for es in emulatedserviceclients])
#if significantfragments < comparisoncount:
#	# special case for replicated data: one fragment or k<n is enough
#	comparisoncount = significantfragments
comparisoncount = significantfragments
print "Required fragments:", comparisoncount

print "Emulation starts..."
inittime = int(time.time())
successes = 0
failures = 0
while True:
	time.sleep(random.random() * 5)

	successcount = 0
	fragnum = 1
	for es in emulatedserviceclients:
		for localfragnum in range(es.fragments):
			try:
				es.download("equal", fragnum + localfragnum)
				successcount += 1
			except:
				pass
		fragnum += es.fragments
	success = True
	if successcount < comparisoncount:
		success = False
		failures += 1
	else:
		successes += 1
	emuavail = float(successes) / (successes + failures)
	vtime = int(time.time()) - inittime
	print "* virtual time [%5i]: download %s: %s [%i/%i]; emu-avail: %3.4f" % (vtime, mode, success, successcount, len(emulatedserviceclients), emuavail)

	f = open("_out.csv", "a")
	print >>f, "%i,%3.4f" % (vtime, emuavail)
	f.close()
